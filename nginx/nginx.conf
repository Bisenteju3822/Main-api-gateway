worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/json;

    access_log logs/access.log;
    error_log logs/error.log;

    # Rate Limiting: 10 requests per second, burst up to 10 without delay
    limit_req_zone $binary_remote_addr zone=req_limit:10m rate=10r/s;

    # IP Filtering
    geo $blocked_ip {
        default 0;
        192.168.1.100 1;  # Block this IP (example)
    }

    # Extract Bearer token from Authorization header
    map $http_authorization $auth_token {
        default "";
        "~^Bearer\s+(.*)$" $1;
    }

    # Upstream services
    upstream auth_service { server 127.0.0.1:5007; }
    upstream user_service { server 127.0.0.1:5002; }
    upstream wallet_service { server 127.0.0.1:5001; }
    upstream game_service { server 127.0.0.1:5006; }
    upstream kyc_service { server 127.0.0.1:5005; }
    upstream leaderboard_service { server 127.0.0.1:5004; }
    upstream payment_service { server 127.0.0.1:5003; }

    server {
        listen 443 ssl;
        server_name 192.168.240.40;  # Replace with your domain or IP

        ssl_certificate C:/Users/tejas/OneDrive/Desktop/Main-Api-Gateway/certs/nginx-selfsigned.crt;
        ssl_certificate_key C:/Users/tejas/OneDrive/Desktop/Main-Api-Gateway/certs/nginx-selfsigned.key;

        location / {
            # Deny blocked IPs
            if ($blocked_ip) {
                return 403 '{"error":"Your IP is blocked"}';
            }

            # Rate limiting
            limit_req zone=req_limit burst=10 nodelay;

            # Reject if missing Authorization header
            if ($auth_token = "") {
                return 401 '{"error":"Missing or invalid Authorization header"}';
            }

            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;

            # Routing to services
            location /auth/ { proxy_pass http://auth_service/; }
            location /user/ { proxy_pass http://user_service/; }
            location /wallet/ { proxy_pass http://wallet_service/; }
            location /game/ { proxy_pass http://game_service/; }
            location /kyc/ { proxy_pass http://kyc_service/; }
            location /leaderboard/ { proxy_pass http://leaderboard_service/; }
            location /payment/ { proxy_pass http://payment_service/; }

            # Error handling
            error_page 403 404 500 502 503 504 /error.json;
            location = /error.json {
                return 500 '{"error":"Internal server error"}';
            }
        }
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name your-server-domain.com;
        return 301 https://$host$request_uri;
    }
}